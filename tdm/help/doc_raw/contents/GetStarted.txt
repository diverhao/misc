import * as React from "react";
import { Help } from "../Help";
import { LINK, IMG, ARTICLE, P, H1, H2, H3, SLIDESHOW, LI } from "../Elements"
import { GlobalVariables } from "../../../global/GlobalVariables";

export const GetStarted = (widget: Help, linkPath: string) => {
    return <Element widget={widget} linkPath={linkPath}></Element>
}

const Element = ({ widget, linkPath }: any) => {
    const registry = React.useRef<Record<string, string[]>>({});

    return (<ARTICLE registry={registry} linkPath={linkPath} title={"Get Started"}>

        <H2 registry={registry}>Download</H2>

        <P>
            You can download the binaries for different platforms
            from <b><LINK link={"https://github.com/diverhao/tdm/releases"}>Github</LINK></b>. TDM is built as portable software on Windows, Linux and MacOS
            for both ARM and x86-64 platforms. It provides the binaries for the following platforms:
        </P>

        <LI>
            Windows for Intel/AMD CPU: <code>win-unpacked.zip</code>
        </LI>
        <LI>
            Windows for ARM CPU: <code>win-arm64-unpacked.zip</code>
        </LI>
        <LI>
            MacOS Intel CPU: <code>TDM-25.4.8.dmg</code>
        </LI>
        <LI>
            MacOS M-series CPU: <code>TDM-25.4.8-arm64.dmg</code>
        </LI>
        <LI>
            Linux Intel/AMD CPU: <code>linux-unpacked.zip</code>
        </LI>
        <LI>
            Linux ARM CPU: <code>linux-arm64-unpacked.zip</code>
        </LI>

        <P>
            The binaries are typically published every month. Please check the Github website periodically for the latest version.
        </P>

        <H2 registry={registry}>Install and run</H2>

        <P>
            The TDM binaries are distributed as portable software, then simply unzip the downloaded file to any folder on your hard to finish the installation.
            All necessary dependencies, including the EPICS Channel Access client, are bundled within the package.
            You do not need to install any additional third-party programs or libraries to run TDM.
        </P>

        <P>
            For <b>MacOS</b>, double-click the <code>.dmg</code> file to mount it. In the window that appears,
            drag the <code>TDM.app</code> icon into the <code>/Applications</code> folder.
            Once copied, you can launch TDM by double-clicking <code>TDM.app</code> in the <code>/Applications</code> folder.
            Alternatively, you can start the software by running command <code>/Applications/TDM.app/Contents/MacOS/TDM</code> in the terminal.
        </P>

        <P>
            For <b>Windows</b>, you can unzip the <code>.zip</code> file to any folder, e.g. <code>C:\Program Files\TDM</code>. Then double click the <code>TDM.exe</code> file to run the software.
        </P>

        <P>
            For <b>Linux</b>, you can unzip the <code>.zip</code> file to any folder, and run the <code>./tdm</code> command in terminal or double click the <code>tdm</code> file in file browser
            to start the software.
        </P>

        You are expected to see a window like below:

        <IMG src={"resources/help/getStarted-00.png"}></IMG>


        <H2 registry={registry}>How to use</H2>

        <H3 registry={registry}>Create and edit a profile</H3>

        <P>
            After launching TDM, you can create a new Profile by clicking the <code>+</code> button.
            To view or edit this Profile, click the 3-dot button in the top-right corner of the profile block.
        </P>

        <P>
            In the Profile editor, you can rename the Profile by editing the text box in the top-left corner
            (remember to hit enter to confirm the change).
            TDM provides a set of pre-defined categories and entries required for operation.
            One of the most important settings is the <code>EPICS_CA_ADDR_LIST</code> entry,
            found under the <code>EPICS CA Settings</code> category. This environment variable can be defined in three places:
            the Channel Access client default, the operating system environment, and within TDM itself.
            In TDM, the value you set will override the others. As shown in the figure below,
            you can easily add, delete, or modify the hosts in the <code>EPICS_CA_ADDR_LIST</code> entry for your Profile.
        </P>

        <IMG src={"resources/help/getStarted-01.gif"}></IMG>

        <H3 registry={registry}>Create your first display</H3>

        <P>
            After the Profile is configured, we can run the TDM under this profile by clicking the profile block.
        </P>

        <IMG src={"resources/help/getStarted-03.png"}></IMG>


        <P>
            The window displayed here is the TDM Main Window, which serves as the central hub for managing your TDM instance.
            All window management features and tools are accessible directly through clearly labeled
            buttonsâ€”there are no dropdown menus or hidden options.
            This streamlined design ensures that all available functions are easy to find and operate,
            making navigation straightforward for users of any experience level.
        </P>

        <P>
            You can create a new display by clicking the <code>Create new display</code> button.
        </P>

        <P>
            There are 2 modes for a Display Window: editing mode and operating mode.
            In editing mode, you can create and modify the widgets on the display;
            in operate mode, the widgets are running and updating the values.
            A newly created display window is initially in editing mode, as shown below:
        </P>

        <IMG src={"resources/help/empty-display-window-editing.png"}></IMG>

        <P>
            The empty area on the left is called Canvas, the narrower area on the right is called
            sidebar. The Canvas is the background of the display, we can create widgets on it. The sidebar contains
            all the options for the window, Canvas and widgets.
        </P>

        <P>
            All the operations on the display window are integrated in the right click context menu.
            This includes creating, editing, and deleting widgets, as well as configuring the display settings.
            To create a widget, right click on the Canvas and choose the widget from
            one of the categories: <code>Create Static Widget</code>, <code>Create Monitor Widget</code>,
            <code>Create Control Widget</code>, and <code>Create Complex Widget</code>.
        </P>

        <P>
            One of the most commonly used widgets in a display manager is the <code>Text Update</code>.
            This widget monitors a PV (Process Variable) and displays its value in a rectangular block.
            To create a <code>Text Update</code> widget, right-click on the Canvas, select <code>Create Monitor Widget</code>, and
            then choose <code>Text Update</code>.
            The mouse cursor will change to a crosshair.
            Hold down the left mouse button to draw the desired area, then release it to place the widget.
            To configure the widget, click on the widget to
            open its sidebar.
            In the <code>Channel</code> input box of <code>Text Update</code> sidebar,
            after entering the PV name (e.g. <code>val7</code>), press the <b><code>Enter</code></b> key to confirm your input.
            This is a consistent requirement for all input boxes in TDM, ensuring that your
            changes are properly registered and applied throughout the application.
            You can further customize the widget by adjusting its position, size, alarm settings, text properties, background color, and more.
            Advanced features such as <code>Rules</code>for dynamic appearance changes will be introduced later.
        </P>

        <P>
            We are still in the <b><code>Editing</code></b> mode. To run the display window,
            right-click on the Canvas and select <code>Execute Display</code>.
            After that, the display window switches to <b><code>Operating</code></b> mode,
            where the sidebar disappears and the values start to update (assuming you already have an EPICS IOC running with
            this PV).
        </P>

        <P>
            The above operations are shown below:
        </P>

        <IMG src={"resources/help/getStarted-04.gif"}></IMG>

        <P>
            The display can be switched back to the <code>Editing</code> mode by right
            clicking the Canvas and select <code>Edit Display</code>.
        </P>

        <P>
            To control the PVs, we can use the <code>Control</code> widgets. The simplest and most commonly used control widget is the <code>Text Entry</code>.
            The creation of a <code>Text Entry</code> widget is similar to that of the <code>Text Update</code> widget.
            Right-click on the Canvas, select <code>Create Control Widget</code>, and then choose <code>Text Entry</code>.
            After the mouse cursor changes to a crosshair, Hold down the left mouse button to draw the desired area, then release it to place the widget.
            In the sidebar of the <code>Text Entry</code> widget, enter the PV name (e.g. <code>val7</code>) to be controlled
            in the <code>Channel</code> input box and press <b><code>Enter</code></b> to confirm.
        </P>

        <P>
            Once the <code>Text Entry</code> widget is created, switch the display window to <code>Operating</code> mode
            by right-clicking the Canvas and selecting <code>Execute Display</code> from the context menu.
            The sidebar will disappear, and the <code>Text Entry</code> widget will now display the current PV value.
            To change the PV, simply enter a new value in the widget and press <b><code>Enter</code></b>.
            The value will be sent to the EPICS IOC, and the PV will be updated in real time.
        </P>

        <P>
            The above operations are shown below:
        </P>

        <IMG src={"resources/help/getStarted-02.gif"}></IMG>

        <H2 registry={registry}>Widgets</H2>

        <P>
            TDM offers over 30 types of widgets, providing a comprehensive set of features for visualizing and controlling
            EPICS data in various formats.
            These widgets are organized into four categories:
        </P>


        <ul>
            <li>
                <P>
                    Static widgets. These widgets are used for displaying static content such as shapes, images, or fixed text.
                    They do not update automatically with EPICS PV changes and are ideal for adding labels, annotations, or decorative elements to the display.
                    For example, the <LINK widget={widget} to={"/StaticWidgets/Label"}>Label</LINK> widget can show static text or LaTeX-formatted formulas,
                    while the <LINK widget={widget} to={"/StaticWidgets/Media"}>Media</LINK> widget supports displaying images, PDF files, and local or remote video files.
                </P>
            </li>
            <li>
                <P>
                    Monitor widgets. These widgets are designed to visualize EPICS PV values in a variety of forms.
                    For example, the <LINK widget={widget} to={"/MonitorWidgets/TextUpdate"}>Text Update</LINK> widget 
                    displays the current value as text within a rectangular block.
                    The <LINK widget={widget} to={"/MonitorWidgets/Tank"}>Tank</LINK> widget represents 
                    the value as the fill level of a water tank, providing an intuitive visual cue.
                    The <LINK widget={widget} to={"/MonitorWidgets/LED"}>LED</LINK> widget offers a simple way 
                    to monitor binary or status values, lighting up to indicate changes.
                </P>
            </li>
            <li>
                <P>
                    Control widgets. These widgets allow users to interact with and modify PV (Process Variable) values using various graphical controls.
                    The most basic example is the <LINK widget={widget} to={"/ControlWidgets/TextEntry"}>Text Entry</LINK>, which lets users input and set values directly.
                    For more intuitive adjustments, the <LINK widget={widget} to={"/ControlWidgets/ScaledSlider"}>Scaled Slider</LINK> enables 
                    users to change values by dragging a slider.
                    Control widgets are essential for real-time operation and provide flexible ways to manage process variables within your display.
                </P>
            </li>
            <li>
                <P>
                    Complex widgets. These widgets are designed for advanced operations that often involve multiple PVs, displays, or steps of logic.
                    Complex widgets enable users to implement sophisticated workflows and interactions within TDM.
                    For example, the <LINK widget={widget} to={"/ComplexWidgets/ActionButton"}>Action Button</LINK> can 
                    perform a variety of actions, such as opening another display window, launching a web page, or executing a command or 
                    shell script with a single click.
                    The <LINK widget={widget} to={"/ComplexWidgets/DataViewer"}>Data Viewer</LINK> allows you to 
                    visualize time series data for a PV. 
                    If TDM is configured to be able to connect an Archiver, you can view both live and historical data together for comprehensive analysis.
                </P>
            </li>
        </ul>

        <P>
            Creating these widgets follows the same process as described for <code>Text Update</code> and <code>Text Entry</code> above.
            Each widget's sidebar contains configuration options,
            including common settings such as position, size, background color, text properties, and alarm settings.
            Additionally, every widget provides its own specific options, which are detailed in their respective chapters throughout
            this documentation.
        </P>


        <H2 registry={registry}>Tools</H2>

        <P>
            TDM provides a variety of tools to enhance the user experience.
            They are all listed on the main window.
        </P>

        <H3 registry={registry}>Post-process data</H3>

        <P>
            TDM provides several advanced features to post-process data. One of them is the computed PV.
        </P>

        <IMG src={"resources/help/getStarted-05.gif"}></IMG>

        <P>
            In a computed PV, the value of an EPICS PV is evaluted in square brackets, i.e. <code>[val7]</code>. We can
            treat <code>[val7]</code> as a number, then apply the corresponding mathematical operation, like <code>[val7] * 3</code>.
            The computed PV follows the syntax of <LINK link={"https://mathjs.org/docs/index.html"}>math.js</LINK>, it
            support most commonly used mathematical opeations. For example,  <code>sqrt(abs(sin([val7] * 3) - 2.8))</code> and <code>sin([val7]) &lt; 0 ? 1 : -1</code>.
        </P>

        <P>
            In TDM, each display can run a standalone Python or Node script for data post-processing.
            The Python binary path is set in the profile. Please refer to <LINK widget={widget} to={"/PythonScript"}></LINK> or  <LINK widget={widget} to={"/JavaScriptScript"}></LINK> for
            details. Here we present a simple example that doubles the value of an EPICS PV.
            Assume there is an EPICS PV <code>val7</code>, we can use a Python script to double
            its value and shown as a Local PV, <code>loc://val7_double</code>. First, create
            a Python script with following contents:
        </P>


        <code># Load libs</code>
        <code>import sys</code>
        <code>import os</code>
        <code>sys.path.append(os.path.abspath("/Applications/TDM.app/Contents/Resources/app.asar.unpacked/dist/mainProcess/wsPv/WsPvClient.py"))</code>
        <code>import WsPvClient</code>
        <code></code>
        <code># create client</code>
        <code>client = WsPvClient.WsPvClient()</code>
        <code></code>
        <code># callback when new value arrives</code>
        <code>def doubleValue(data):</code>
        <code>&nbsp;&nbsp;&nbsp;&nbsp;value = data["value"]</code>
        <code>&nbsp;&nbsp;&nbsp;&nbsp;client.put("loc://val7_double", value * 2)</code>
        <code></code>
        <code># monitor the EPICS channel and double it</code>
        <code>client.monitor("val7", doubleValue)</code>
        <code></code>
        <code># run the program</code>
        <code>client.run()</code>


        <P>
            TDM provides a Text Editor to edit simple text files. You can click the Text Editor button
            on the main window to open it. Or click the <img src={"resources/webpages/modify-symbol.svg"} width={`${GlobalVariables.defaultFontSize}px`}></img> symbol
            to open the existing or create a new Python script.
        </P>

        <P>
            In above code, the long path <code>/Applications/TDM.app/.../WsPvClient.py</code> is the API file
            for the communication between TDM and Python.
        </P>

        <H3 registry={registry}>Change widget apperance at runtime</H3>

        <P>
            Most of the time, the widget should only update the value displayed on the screen. Sometimes we may need
            the widget changing its appearance to draw attention. For example, when the PV is in MAJOR severity,
            we want to alert the operator by showing a red border. This can be done in the widget's <code>Alarm Border</code> option.
            In TDM, more complicated appearance change can be realized by the <code>rules</code>.
        </P>

        <P>
            We can define one or more rules, where for each rule there are 3 components: <code>condition</code>, <code>property</code>, and <code>value</code>.
            We can interprete them as: when <code>condition</code> is true, the <code>property</code> becomes <code>value</code>.
            The <code>condition</code> must be evaluated as true or false, e.g. <code>[val7] &ge; 0</code>, <code>[val7] == 38</code>, or <code>true</code>.
            If a <code>condtion</code> is not valid, the rule is not applied.
            Note numerical 0 or 1 is not considered as a valid <code>condition</code>.
        </P>

        <P>
            Below shows an example that when <code>val7</code> is an even number, the widget width is changed shorter, and when <code>val7</code> is
            divisible by 3, the background color becomes red. We use 2
            computed PVs <code>[val7] % 2 == 0</code> and <code>[val7] % 3 == 0</code> for the these rules.
        </P>

        <IMG src={"resources/help/getStarted-06.gif"}></IMG>

        <H3 registry={registry}>Tools</H3>

        <P>
            TDM provides several tools to help managing the software and the data. For example, the <code>CA Snooper</code> is used for detecting new
            Channel Access name search requests. You can find this tool from the main window.
        </P>

        <IMG src={"resources/help/getStarted-07.png"}></IMG>

        <P>
            The <code>PV Table</code> can be used to monitor multiple channels at a time.
            There are several ways to add new channels to it:
        </P>

        <IMG src={"resources/help/getStarted-08.gif"}></IMG>

        <P>
            or, you can directly open a <code>.db</code> file to load all its channels.
        </P>

        <IMG src={"resources/help/getStarted-09.gif"}></IMG>


    </ARTICLE>)
};
